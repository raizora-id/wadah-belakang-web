// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/repository/warehouse/warehouse.go

// Package mock_warehouse is a generated GoMock package.
package mock_warehouse

import (
	context "context"
	sql "database/sql"
	entity "ecommerce/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWarehouseRepository is a mock of WarehouseRepository interface.
type MockWarehouseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseRepositoryMockRecorder
}

// MockWarehouseRepositoryMockRecorder is the mock recorder for MockWarehouseRepository.
type MockWarehouseRepositoryMockRecorder struct {
	mock *MockWarehouseRepository
}

// NewMockWarehouseRepository creates a new mock instance.
func NewMockWarehouseRepository(ctrl *gomock.Controller) *MockWarehouseRepository {
	mock := &MockWarehouseRepository{ctrl: ctrl}
	mock.recorder = &MockWarehouseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseRepository) EXPECT() *MockWarehouseRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockWarehouseRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockWarehouseRepositoryMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockWarehouseRepository)(nil).BeginTx), ctx)
}

// CommitTx mocks base method.
func (m *MockWarehouseRepository) CommitTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockWarehouseRepositoryMockRecorder) CommitTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockWarehouseRepository)(nil).CommitTx), ctx, tx)
}

// CreateStock mocks base method.
func (m *MockWarehouseRepository) CreateStock(ctx context.Context, request entity.CreateStockRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStock", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStock indicates an expected call of CreateStock.
func (mr *MockWarehouseRepositoryMockRecorder) CreateStock(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStock", reflect.TypeOf((*MockWarehouseRepository)(nil).CreateStock), ctx, request)
}

// CreateStockTransfer mocks base method.
func (m *MockWarehouseRepository) CreateStockTransfer(ctx context.Context, tx *sql.Tx, request entity.StockTransferRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStockTransfer", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStockTransfer indicates an expected call of CreateStockTransfer.
func (mr *MockWarehouseRepositoryMockRecorder) CreateStockTransfer(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStockTransfer", reflect.TypeOf((*MockWarehouseRepository)(nil).CreateStockTransfer), ctx, tx, request)
}

// CreateWarehouse mocks base method.
func (m *MockWarehouseRepository) CreateWarehouse(ctx context.Context, request entity.CreateWarehouseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarehouse", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWarehouse indicates an expected call of CreateWarehouse.
func (mr *MockWarehouseRepositoryMockRecorder) CreateWarehouse(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarehouse", reflect.TypeOf((*MockWarehouseRepository)(nil).CreateWarehouse), ctx, request)
}

// DecreaseStock mocks base method.
func (m *MockWarehouseRepository) DecreaseStock(ctx context.Context, tx *sql.Tx, request entity.StockTransferRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseStock", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseStock indicates an expected call of DecreaseStock.
func (mr *MockWarehouseRepositoryMockRecorder) DecreaseStock(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseStock", reflect.TypeOf((*MockWarehouseRepository)(nil).DecreaseStock), ctx, tx, request)
}

// GetStockById mocks base method.
func (m *MockWarehouseRepository) GetStockById(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockById", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockById indicates an expected call of GetStockById.
func (mr *MockWarehouseRepositoryMockRecorder) GetStockById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockById", reflect.TypeOf((*MockWarehouseRepository)(nil).GetStockById), ctx, id)
}

// GetStockByWarehouseIdAndSkuId mocks base method.
func (m *MockWarehouseRepository) GetStockByWarehouseIdAndSkuId(ctx context.Context, warehouseId, skuId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockByWarehouseIdAndSkuId", ctx, warehouseId, skuId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockByWarehouseIdAndSkuId indicates an expected call of GetStockByWarehouseIdAndSkuId.
func (mr *MockWarehouseRepositoryMockRecorder) GetStockByWarehouseIdAndSkuId(ctx, warehouseId, skuId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockByWarehouseIdAndSkuId", reflect.TypeOf((*MockWarehouseRepository)(nil).GetStockByWarehouseIdAndSkuId), ctx, warehouseId, skuId)
}

// IncreaseStock mocks base method.
func (m *MockWarehouseRepository) IncreaseStock(ctx context.Context, tx *sql.Tx, request entity.StockTransferRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseStock", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseStock indicates an expected call of IncreaseStock.
func (mr *MockWarehouseRepositoryMockRecorder) IncreaseStock(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseStock", reflect.TypeOf((*MockWarehouseRepository)(nil).IncreaseStock), ctx, tx, request)
}

// IsExistShopId mocks base method.
func (m *MockWarehouseRepository) IsExistShopId(ctx context.Context, shopId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistShopId", ctx, shopId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistShopId indicates an expected call of IsExistShopId.
func (mr *MockWarehouseRepositoryMockRecorder) IsExistShopId(ctx, shopId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistShopId", reflect.TypeOf((*MockWarehouseRepository)(nil).IsExistShopId), ctx, shopId)
}

// IsExistStockByWarehouseIdAndSkuId mocks base method.
func (m *MockWarehouseRepository) IsExistStockByWarehouseIdAndSkuId(ctx context.Context, warehouseId, skuId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistStockByWarehouseIdAndSkuId", ctx, warehouseId, skuId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExistStockByWarehouseIdAndSkuId indicates an expected call of IsExistStockByWarehouseIdAndSkuId.
func (mr *MockWarehouseRepositoryMockRecorder) IsExistStockByWarehouseIdAndSkuId(ctx, warehouseId, skuId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistStockByWarehouseIdAndSkuId", reflect.TypeOf((*MockWarehouseRepository)(nil).IsExistStockByWarehouseIdAndSkuId), ctx, warehouseId, skuId)
}

// RollbackTx mocks base method.
func (m *MockWarehouseRepository) RollbackTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockWarehouseRepositoryMockRecorder) RollbackTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockWarehouseRepository)(nil).RollbackTx), ctx, tx)
}

// SetStatusWarehouse mocks base method.
func (m *MockWarehouseRepository) SetStatusWarehouse(ctx context.Context, request entity.SetStatusWarehouseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusWarehouse", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusWarehouse indicates an expected call of SetStatusWarehouse.
func (mr *MockWarehouseRepositoryMockRecorder) SetStatusWarehouse(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusWarehouse", reflect.TypeOf((*MockWarehouseRepository)(nil).SetStatusWarehouse), ctx, request)
}

// UpdateStock mocks base method.
func (m *MockWarehouseRepository) UpdateStock(ctx context.Context, id string, request entity.UpdateStockRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStock", ctx, id, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStock indicates an expected call of UpdateStock.
func (mr *MockWarehouseRepositoryMockRecorder) UpdateStock(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStock", reflect.TypeOf((*MockWarehouseRepository)(nil).UpdateStock), ctx, id, request)
}
