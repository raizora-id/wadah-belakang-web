// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/repository/product/product.go

// Package mock_product is a generated GoMock package.
package mock_product

import (
	context "context"
	sql "database/sql"
	entity "ecommerce/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockProductRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockProductRepositoryMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockProductRepository)(nil).BeginTx), ctx)
}

// CommitTx mocks base method.
func (m *MockProductRepository) CommitTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockProductRepositoryMockRecorder) CommitTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockProductRepository)(nil).CommitTx), ctx, tx)
}

// CreateMultipleSku mocks base method.
func (m *MockProductRepository) CreateMultipleSku(ctx context.Context, tx *sql.Tx, request entity.CreateProductRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultipleSku", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultipleSku indicates an expected call of CreateMultipleSku.
func (mr *MockProductRepositoryMockRecorder) CreateMultipleSku(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipleSku", reflect.TypeOf((*MockProductRepository)(nil).CreateMultipleSku), ctx, tx, request)
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(ctx context.Context, tx *sql.Tx, request entity.CreateProductRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, tx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), ctx, tx, request)
}

// GetProduct mocks base method.
func (m *MockProductRepository) GetProduct(ctx context.Context, filter entity.QueryRequest) ([]*entity.GetProductListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, filter)
	ret0, _ := ret[0].([]*entity.GetProductListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductRepositoryMockRecorder) GetProduct(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductRepository)(nil).GetProduct), ctx, filter)
}

// GetSku mocks base method.
func (m *MockProductRepository) GetSku(ctx context.Context, productIDs []string) ([]*entity.ProductDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSku", ctx, productIDs)
	ret0, _ := ret[0].([]*entity.ProductDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSku indicates an expected call of GetSku.
func (mr *MockProductRepositoryMockRecorder) GetSku(ctx, productIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSku", reflect.TypeOf((*MockProductRepository)(nil).GetSku), ctx, productIDs)
}

// GetTotalProduct mocks base method.
func (m *MockProductRepository) GetTotalProduct(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalProduct", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalProduct indicates an expected call of GetTotalProduct.
func (mr *MockProductRepositoryMockRecorder) GetTotalProduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalProduct", reflect.TypeOf((*MockProductRepository)(nil).GetTotalProduct), ctx)
}

// RollbackTx mocks base method.
func (m *MockProductRepository) RollbackTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockProductRepositoryMockRecorder) RollbackTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockProductRepository)(nil).RollbackTx), ctx, tx)
}
