// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/repository/admin/admin.go

// Package mock_admin is a generated GoMock package.
package mock_admin

import (
	context "context"
	entity "ecommerce/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// GetAdminByUsername mocks base method.
func (m *MockAdminRepository) GetAdminByUsername(ctx context.Context, username string) (entity.GetAdminDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByUsername", ctx, username)
	ret0, _ := ret[0].(entity.GetAdminDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByUsername indicates an expected call of GetAdminByUsername.
func (mr *MockAdminRepositoryMockRecorder) GetAdminByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByUsername", reflect.TypeOf((*MockAdminRepository)(nil).GetAdminByUsername), ctx, username)
}
