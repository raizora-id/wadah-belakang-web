// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/repository/shop/shop.go

// Package mock_shop is a generated GoMock package.
package mock_shop

import (
	context "context"
	entity "ecommerce/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShopRepository is a mock of ShopRepository interface.
type MockShopRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShopRepositoryMockRecorder
}

// MockShopRepositoryMockRecorder is the mock recorder for MockShopRepository.
type MockShopRepositoryMockRecorder struct {
	mock *MockShopRepository
}

// NewMockShopRepository creates a new mock instance.
func NewMockShopRepository(ctrl *gomock.Controller) *MockShopRepository {
	mock := &MockShopRepository{ctrl: ctrl}
	mock.recorder = &MockShopRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopRepository) EXPECT() *MockShopRepositoryMockRecorder {
	return m.recorder
}

// CreateShop mocks base method.
func (m *MockShopRepository) CreateShop(ctx context.Context, shop entity.CreateShopRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShop", ctx, shop)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShop indicates an expected call of CreateShop.
func (mr *MockShopRepositoryMockRecorder) CreateShop(ctx, shop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShop", reflect.TypeOf((*MockShopRepository)(nil).CreateShop), ctx, shop)
}
